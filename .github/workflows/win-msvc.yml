name: Windows-MSVC
on: 
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/macos.yml'
      - '.github/workflows/win-mingw.yml'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/macos.yml'
      - '.github/workflows/win-mingw.yml'
jobs:
  build:
    name: Build
    runs-on: windows-latest
    strategy:
      matrix:
        qt_ver: [5.15.0]
        qt_target: [desktop]
        qt_arch: [win64_msvc2019_64, win32_msvc2019]
        include:
          - qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
            openssl_url: https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_openssl_x64/qt.tools.openssl.win_x64/1.1.1-4openssl_1.1.1d_prebuild_x64.7z
            openssl_dir: Tools\OpenSSL\Win_x64\bin
          - qt_arch: win32_msvc2019
            msvc_arch: x86
            qt_arch_install: msvc2019
            openssl_url: https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_openssl_x86/qt.tools.openssl.win_x86/1.1.1-4openssl_1.1.1d_prebuild_x86.7z
            openssl_dir: Tools\OpenSSL\Win_x86\bin
    env:
      targetName: CJLV
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.0.0
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          target: ${{ matrix.qt_target }}
          # Architecture for Windows/Android
          arch: ${{ matrix.qt_arch }}
          
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true

      - run: Invoke-WebRequest -Uri https://download.qt.io/official_releases/jom/jom.zip -OutFile jom.zip
      - run: 7z x jom.zip

      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          cd 3rdparty\scintilla\qt\ScintillaEdit
          python WidgetGen.py
          cd ..\..\..\..
          mkdir build
          cd build
          qmake -r CONFIG+=release CONFIG+=qtquickcompiler ..
          ..\jom.exe -j 4
          cd ..

      - run: Invoke-WebRequest -Uri ${{ matrix.openssl_url }} -OutFile openssl_prebuild.7z
      - run: 7z x openssl_prebuild.7z
      
      - name: package
        env:
          archiveName: ${{ env.targetName }}-${{ matrix.qt_arch }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${env:archiveName}
          Copy-Item build\Release\${env:targetName}'.exe' ${env:archiveName}\
          Copy-Item build\Release\Everything.exe ${env:archiveName}\
          Copy-Item build\Release\Everything*.dll ${env:archiveName}\
          Copy-Item ${{ matrix.openssl_dir }}\*.dll ${env:archiveName}\
          windeployqt --qmldir . ${env:archiveName}\${env:targetName}'.exe'
          Compress-Archive -Path ${env:archiveName} ${env:archiveName}'.zip'
          $name = ${env:archiveName}
          echo "::set-env name=packageName::$name"
          Write-Host 'packageName:'${env:packageName}

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: ${{ env.targetName }}-${{ matrix.qt_arch }}
          path: ${{ env.targetName }}-${{ matrix.qt_arch }}

      - name: queryReleaseWin
        id: queryReleaseWin
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        env:
          githubFullName: ${{ github.event.repository.full_name }}
          ref: ${{ github.event.ref }}
        run: |
          [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
          [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
          $response={}
          try {
            $response = Invoke-RestMethod -Uri $url -Method Get
          } catch {
            Write-Host "StatusCode:" $_.Exception.Response.StatusCode.value__ 
            Write-Host "StatusDescription:" $_.Exception.Response.StatusDescription
            echo "::set-output name=needCreateRelease::true"  
            return
          }
          [string]$latestUpUrl = $response.upload_url
          Write-Host 'latestUpUrl:'$latestUpUrl
          if ($latestUpUrl.Length -eq 0) {
            echo "::set-output name=needCreateRelease::true"  
          }
      - name: createReleaseWin
        id: createReleaseWin
        if: startsWith(github.event.ref, 'refs/tags/') && steps.queryReleaseWin.outputs.needCreateRelease == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1.0.0
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      - name: getLatestTagRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        env:
          githubFullName: ${{ github.event.repository.full_name }}
          upUrl: ${{ steps.createReleaseWin.outputs.upload_url }}
          ref: ${{ github.event.ref }}
        run: |
          if (${env:upUrl}.Length -gt 0) {
              $v=${env:upUrl}
              echo "::set-env name=uploadUrl::$v"
              return
          } 
          [string]$tag = ${env:ref}.Substring(${env:ref}.LastIndexOf('/') + 1)
          [string]$url = 'https://api.github.com/repos/' + ${env:githubFullName} + '/releases/tags/' + ${tag}
          $response = Invoke-RestMethod -Uri $url -Method Get
          [string]$latestUpUrl = $response.upload_url
          Write-Host 'latestUpUrl:'$latestUpUrl
          echo "::set-env name=uploadUrl::$latestUpUrl"
          Write-Host 'env uploadUrl:'${env:uploadUrl}
      - name: uploadRelease
        id: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ env.uploadUrl }}
          asset_path: ./${{ env.packageName }}.zip
          asset_name: ${{ env.packageName }}.zip
          asset_content_type: application/zip
